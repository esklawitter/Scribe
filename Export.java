import javax.servlet.*;
import java.io.*;
import org.apache.commons.codec.binary.Base64;
import javax.xml.bind.JAXBException;
import org.slf4j.*;
import org.docx4j.*;
import org.pptx4j.*;
import javax.servlet.annotation.WebServlet;



@WebServlet("/Export")
public class Export extends HttpServlet  {

    //protected static Logger log = LoggerFactory.getLogger(InsertPicture.class);

    @Override
    /* Merges incoming user markup with the initially uploaded base powerpoint presentation */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
           
      try{
        // selects destinatino to save pptx
        String outputfilepath = System.getProperty("user.dir") + "/sample-docs/pptx-picture.pptx";

        String inputfilepath = System.getProperty("user.dir")
            + "/sample-docs/pptx/pptx-basic.xml";
        
        //determines current file path
        String root = getServletContext().getRealPath("/");
        root+= "/rooms/";
        root+= request.getParameter("room") + "/";
        String [] files = new File(root).list();
        String sessionID = request.getSession().getId();
        
        // Create skeletal package, including a MainPresentationPart and a SlideLayoutPart
        PresentationMLPackage presentationMLPackage = PresentationMLPackage.createPackage(); 
        int originalCX= 0;
        int originalCY= 0;
        //checks if there is an original pptx to modify
        boolean presentationPresent= checkForExisting(files);
        

        //if exporting to existing presentation, gets presentation size
        if (presentationPresent){
            PresentationMLPackage tempPackage= PresentationMLPackage.load(new File( root + "presentation.pptx"));
            MainPresentationPart tpp= (MainPresentationPart)tempPackage.getParts().getParts().get(
                new PartName("/ppt/presentation.xml"));
                
            originalCX= tpp.getJaxbElement().getSldSz().getCx();
            originalCY= tpp.getJaxbElement().getSldSz().getCy();
        }
            
            

        // Need references to these parts to create a slide
        // created by createPackage() above.  
        MainPresentationPart pp = (MainPresentationPart)presentationMLPackage.getParts().getParts().get(
                new PartName("/ppt/presentation.xml"));
                
        SlideLayoutPart layoutPart = (SlideLayoutPart)presentationMLPackage.getParts().getParts().get(
                new PartName("/ppt/slideLayouts/slideLayout1.xml"));
                
        
        // calculates if powerpoint is widescreen or 4:3     
        int cx= pp.getJaxbElement().getSldSz().getCx();
        int cy= pp.getJaxbElement().getSldSz().getCy();
        if (cy *1.0 / cx == 0.75){
            int temp = (int)(cx*1.333333333333333333333333);
            pp.getJaxbElement().getSldSz().setCx(temp);
            cx=temp;
        }
            
            
        // OK, now we can create a slide
       

       //creates new slides for modified presentation
       SlidePart slidePart;
       String name;
       int numUserSlides= new File(root + sessionID).list().length;
       System.out.println(numUserSlides + " user slides");
       int numPresentationSlides= new File(root).list().length - 1;

       System.out.println(numPresentationSlides + " presentation slides");
       int toCreate= numUserSlides;
       // if the user added more slides, must create new ones
       if (numPresentationSlides > numUserSlides){
           toCreate= numPresentationSlides;
        }
       
       //creates a new slide array of the length generated by the user
        SlidePart[] parts = new SlidePart [toCreate];
       for (int i = 1; i<= toCreate; i++){
           System.out.println("adding slide");
           parts[i-1]=(SlidePart) presentationMLPackage.getParts().get(new PartName("/ppt/slides/slide"+i+".xml", true));

        }

        // adds each existing slide to a new pptx file
        File file; 
        BinaryPartAbstractImage imagePart;
        Relationship rel;
        for (int i= 1; i <= numPresentationSlides; i++){
            System.out.println("attempting to add: " + root + "slide-"+i+".png");
            file = new File(root+ "slide-" + i + ".png" );
            imagePart = BinaryPartAbstractImage.createImagePart(presentationMLPackage, parts[i-1], file);
            rel = parts[i-1].addTargetPart(imagePart);
            parts[i-1].getJaxbElement().getCSld().getSpTree().getSpOrGrpSpOrGraphicFrame().add(
                createPicture(rel.getId(), ogCX, ogCY));
        }


        // adds new slides to file
        System.out.println("presentation slides finished");
        for (int i= 1; i <= numUserSlides; i++){
            System.out.println("attempting to add: "+ root + sessionID +  "/" + i + ".png");
            file = new File(root + sessionID +  "/" + i + ".png" );
            imagePart = BinaryPartAbstractImage.createImagePart(presentationMLPackage, parts[i-1], file);
            rel = parts[i-1].addTargetPart(imagePart);
            parts[i-1].getJaxbElement().getCSld().getSpTree().getSpOrGrpSpOrGraphicFrame().add(
                createPicture(rel.getId(), cx, cy));
        }
          
        presentationMLPackage.save(new java.io.File(  root + sessionID + "myPresentation.pptx"));

        System.out.println("\n\n done .. saved ");


        }
        catch (Exception e){
            e.printStackTrace();
        }


    }   

    // checks if the user modified a blank presentation
    private static boolean checkForExisting(String[] files){
        for (String s : files){
            if (s == "presentation.pptx"){
                return true;
            }
        }
        return false;
    }

    // builds a slide image using the incoming slide data
    private static Object createPicture(String relId, int x, int y) throws JAXBException {

        // Create p:pic         
        java.util.HashMap<String, String>mappings = new java.util.HashMap<String, String>();
        
        mappings.put("id1", "4");
        mappings.put("name", "Picture 3");
        mappings.put("rEmbedId", relId );
        mappings.put("offx", Long.toString(0));
        mappings.put("offy", Long.toString(0));
        mappings.put("extcx", Long.toString(x));
        mappings.put("extcy", Long.toString(y));
        
        return org.docx4j.XmlUtils.unmarshallFromTemplate(PICTURE, 
                mappings, Context.jcPML, Pic.class ) ;   
        

    }

    // xml formatting for .pptx picture
    private static String PICTURE =          
          "<p:pic xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:p=\"http://schemas.openxmlformats.org/presentationml/2006/main\"> "
            + "<p:nvPicPr>"
              + "<p:cNvPr id=\"${id1}\" name=\"${name}\" descr=\"${descr}\"/>"
              + "<p:cNvPicPr>"
                + "<a:picLocks noChangeAspect=\"1\"/>"
              + "</p:cNvPicPr>"
              + "<p:nvPr/>"
            + "</p:nvPicPr>"
            + "<p:blipFill>"
              + "<a:blip r:embed=\"${rEmbedId}\" cstate=\"print\"/>"
              + "<a:stretch>"
                + "<a:fillRect/>"
              + "</a:stretch>"
            + "</p:blipFill>"
            + "<p:spPr>"
              + "<a:xfrm>"
                + "<a:off x=\"${offx}\" y=\"${offy}\"/>"
                + "<a:ext cx=\"${extcx}\" cy=\"${extcy}\"/>"
              + "</a:xfrm>"
              + "<a:prstGeom prst=\"rect\">"
                + "<a:avLst/>"
              + "</a:prstGeom>"
            + "</p:spPr>"
          + "</p:pic>";


}